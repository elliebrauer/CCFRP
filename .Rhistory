) +
scale_x_continuous(limit = c(0,60)) +
theme_bw() +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
geom_text(aes(x = 1, y = y_pos[i], label = Label),
size = 2.5, family = "sans", #inherit.aes = FALSE,
data = spp_length_plot_dat, check_overlap = TRUE,
hjust = 0)
# print(p1)
})
}
names(plot_list) = spp_to_plot
spp_to_plot
print(plot_list[1])
print(plot_list[2])
print(plot_list[3])
x11();print(plot_list[3])
length(plot_list)
for(i in 1:length(plot_list)) {
print(plot_list[[i]])
cat('\n\n')
}
#fig.cap = "Percent of fish in 2 cm fork length bins inside each MPA and outside at reference areas (REF)."
#eval.after = "fig.cap",warning = FALSE, message = FALSE, echo = FALSE,
for(i in 1:length(plot_list)) {
print(plot_list[[i]])
cat('\n\n')
}
x11();print(plot_list[3])
knitr::include_graphics('MPA_map.pdf')
x11();print(plot_list[3])
#"Frequency of fork length (cm) for inside each MPA (MPA) and outside at reference areas (REF).",
#create plot list
plot_list = vector('list', length(spp_to_plot))
for(i in 1:length(spp_to_plot)){
#subset to the species
spp_length_plot_dat = species_lengths %>%
dplyr::filter(Common.Name == spp_to_plot[i])
#tally the sample sizes and create the label
length_counts <- species_lengths %>%
filter(Common.Name == spp_to_plot[i]) %>%
group_by(Common.Name, Name, SITE) %>%
summarise(n = n()) %>%
filter(n>19) %>%
pivot_wider(id_cols = Name, names_from = SITE, values_from = n, values_fill = NA) %>%
mutate(Label = paste("MPA: N = ", MPA, "\nREF: N = ", REF)) %>%
rename(MPA1 = MPA,
REF1 = REF)
#join the labels to the dataframe and remove the rows with <20 in a site
spp_length_plot_dat <- left_join(spp_length_plot_dat, length_counts)
spp_length_plot_dat <- spp_length_plot_dat %>%
filter((!is.na(MPA1) & SITE=='MPA') | (!is.na(REF1) & SITE=='REF')) %>%
droplevels()
#set x and y coordinates for the labels
# and number of columns
# x_pos = c(15, 15, 5, 5)
y_pos = c(0.12, 0.11, 0.1, 0.1, 0.1, 0.1)
ncols = c(2, 3, 2, 2, 2, 2)
plot_list[[i]]  <- local({
i <- i
p1 <- ggplot(aes(x = Length..cm., fill = SITE), data = spp_length_plot_dat) +
geom_density(alpha=0.5) + #inherit.aes = FALSE, , trim = TRUE
#scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~Name, ncol = ncols[i], dir = "v") + #, scale = "free_y", space = "free"
scale_color_brewer(palette = "Dark2") +
labs(
x = "Fork length (cm)",
y = "Density"
) +
scale_x_continuous(limit = c(0,60)) +
theme_bw() +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
geom_text(aes(x = 1, y = y_pos[i], label = Label),
size = 2.5, family = "sans", #inherit.aes = FALSE,
data = spp_length_plot_dat, check_overlap = TRUE,
hjust = 0)
# print(p1)
})
}
names(plot_list) = spp_to_plot
x11(); print(plot_list[3])
x11(); print(plot_list[4])
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/GitHub/CCFRP")
#-------------------------------------------------------------------------------
# Read in data and basic cleanup
load("CCFRP_cleanedup.RData")
#-------------------------------------------------------------------------------
Assess2023 <- data.frame(
Species = c(
#    "Black Rockfish",
#    "Copper Rockfish",
"Quillback Rockfish",
"Yellowtail Rockfish",
"Vermilion Rockfish",
"Gopher Rockfish"
),
AssessGroup = "Assess2023"
)
# AssessTop30 <- data.frame(
#   Species = c(
#     "Brown Rockfish",
#     "Treefish",
#     "Blue Rockfish",
#     "Deacon Rockfish",
#     "Canary Rockfish",
#     "Vermilion Rockfish",
#     "China Rockfish",
#     "Olive Rockfish",
#     "Grass Rockfish"
#   ),
#   AssessGroup = "AssessTop30"
# )
SpeciesOfInterest <- Assess2023 #rbind(Assess2023, AssessTop30)
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(dplyr)
library(ggplot2)
library(ggridges)
library(stringr)
library(tidyr)
library(purrr)
library(unikn)
library(viridis)
library(kableExtra)
library(knitr)
library(forcats)
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/GitHub/CCFRP")
#-------------------------------------------------------------------------------
# Read in data and basic cleanup
load("CCFRP_cleanedup.RData")
#-------------------------------------------------------------------------------
Assess2023 <- data.frame(
Species = c(
#    "Black Rockfish",
#    "Copper Rockfish",
"Quillback Rockfish",
"Yellowtail Rockfish",
"Vermilion Rockfish",
"Gopher Rockfish"
),
AssessGroup = "Assess2023"
)
# AssessTop30 <- data.frame(
#   Species = c(
#     "Brown Rockfish",
#     "Treefish",
#     "Blue Rockfish",
#     "Deacon Rockfish",
#     "Canary Rockfish",
#     "Vermilion Rockfish",
#     "China Rockfish",
#     "Olive Rockfish",
#     "Grass Rockfish"
#   ),
#   AssessGroup = "AssessTop30"
# )
SpeciesOfInterest <- Assess2023 #rbind(Assess2023, AssessTop30)
dat_final <- dat_final %>%
ungroup() %>%
dplyr::mutate(Monitoring.Group = factor(Monitoring.Group, levels = c(
"MLML",
"Cal Poly",
"HSU", "BML",
"UCSB", "SIO"
))) %>%
dplyr::mutate(`Monitoring Group` = Monitoring.Group) %>%
dplyr::mutate(`Monitoring Group` = recode(`Monitoring Group`,
"HSU" = "Cal Poly Humboldt",
"BML" = "Bodega Marine Lab",
"MLML" = "Moss Landing Marine Lab",
"Cal Poly" = "Cal Poly SLO",
"UCSB" = "UC Santa Barbara",
"SIO" = "Scripps Institute Ocean."
)) %>%
dplyr::mutate(Monitoring.Group = recode(Monitoring.Group,
"HSU" = "Humboldt",
"BML" = "Bodega",
"MLML" = "Moss Landing",
"Cal Poly" = "Cal Poly",
"UCSB" = "UCSB",
"SIO" = "Scripps"
)) %>%
#  dplyr::mutate(Name = factor(Name)) %>%
# dplyr:: mutate(Name = dplyr::recode(Name,
#                       "Año Nuevo" = "Ano Nuevo")) %>%
dplyr::mutate(Name = factor(Name, levels = c(
"South Cape Mendocino", "Ten Mile",
"Stewarts Point", "Bodega Head",
"Año Nuevo", "Point Lobos",
"Piedras Blancas", "Point Buchon",
"Carrington Point", "Anacapa Island",
"Swamis", "South La Jolla"
))) %>%
dplyr::mutate(Name = recode(Name,
"Año Nuevo" = "Ano Nuevo")) %>%
dplyr::mutate(SITE = factor(SITE))
# Change the levels of monitoring groups from north to south - didn't do before because of weird tables stuff
# Reorder the factor levels north to south
dat_final <- dat_final %>%
mutate(Monitoring.Group = fct_relevel(Monitoring.Group, "Moss Landing", after = 3)) %>%
mutate(Monitoring.Group = fct_relevel(Monitoring.Group, "Cal Poly", after = 3))
# Just drift info
drifts_final <- dat_final %>%
ungroup() %>%
select(
Drift.ID, Trip.ID, Grid.Cell.ID, SITE, Name, MPA.Designation, YEAR, Month,
Day, Start.Depth..ft., End.Depth..ft., Monitoring.Group,
StartGISDepth2mRes_ft, StartGISDepth90mRes_ft, EndGISDepth2mRes_ft,
EndGISDepth90mRes_ft
) %>%
unique()
# lengths and then join to drift info
species_lengths <- catches %>%
filter(!is.na(Length..cm.))
species_lengths <- inner_join(species_lengths, drifts_final)
View(dat_final)
ggplot(dat_final, aes(x = names(),y=Start.Depth..ft., colour = SITE )) + geom_boxplot()
ggplot(dat_final, aes(x = Name,y=Start.Depth..ft., colour = SITE )) + geom_boxplot()
ggplot(dat_final, aes(x = Name,y=Start.Depth..ft., colour = SITE )) + geom_boxplot()x11();
x11();ggplot(dat_final, aes(x = Name,y=Start.Depth..ft., colour = SITE )) + geom_boxplot()
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/GitHub/CCFRP")
#-------------------------------------------------------------------------------
# Read in data and basic cleanup
load("CCFRP_cleanedup.RData")
#-------------------------------------------------------------------------------
Assess2023 <- data.frame(
Species = c(
#    "Black Rockfish",
#    "Copper Rockfish",
"Quillback Rockfish",
"Yellowtail Rockfish",
"Vermilion Rockfish",
"Gopher Rockfish"
),
AssessGroup = "Assess2023"
)
# AssessTop30 <- data.frame(
#   Species = c(
#     "Brown Rockfish",
#     "Treefish",
#     "Blue Rockfish",
#     "Deacon Rockfish",
#     "Canary Rockfish",
#     "Vermilion Rockfish",
#     "China Rockfish",
#     "Olive Rockfish",
#     "Grass Rockfish"
#   ),
#   AssessGroup = "AssessTop30"
# )
SpeciesOfInterest <- Assess2023 #rbind(Assess2023, AssessTop30)
View(dat_final)
################################################################################
### Script to clean up the CCFRP data and get it in
### A form to use for exploratory analysis
### Melissa Monk
### Feb 2022
################################################################################
rm(list = ls(all = TRUE))
graphics.off()
library(dplyr)
library(tidyr)
setwd("C:/GitHub/CCFRP")
#-------------------------------------------------------------------------------
# Read in data and basic cleanup
# Eventually open these directly in access, but it's not behaving
# Extract excel files from the Access database
# read in trip data
trips <- read.csv("1-Trip Information.csv", fileEncoding="UTF-8-BOM")
# read in drift data
drifts_all <-read.csv("3-Drift Information.csv", fileEncoding="UTF-8-BOM")
# read in catch data
catches <- read.csv("4-Caught Fishes.csv", fileEncoding="UTF-8-BOM")
#Species lookup
Species <- read.csv("Fish Species.csv", fileEncoding="UTF-8-BOM")
Species$NMFS_interest = Species$Rockfish
nonrockfish = c("California Scorpionfish", "Kelp Greenling", "Lingcod")
Species <- Species %>%
mutate(NMFS_interest = replace(NMFS_interest, Common.Name %in% nonrockfish, TRUE))
Species <- Species %>%
select(Species.Code, Common.Name, Rockfish, NMFS_interest) %>%
filter(NMFS_interest==TRUE)
#Read in management groups
Areas <- read.csv("Monitoring Areas.csv", fileEncoding="UTF-8-BOM")
# read in the two GIS depth spreadsheets from Becky
GIS.start.depth <- readxl::read_xlsx("CCFRP_Start_GIS_Depths.xlsx")
GIS.end.depth <- readxl::read_xlsx("CCFRP_End_GIS_Depths.xlsx")
# columns have spaces - remove all spaces here
trips <- trips %>% rename_all(make.names)
catches <- catches %>% rename_all(make.names)
drifts_all <- drifts_all %>% rename_all(make.names)
#Add species common names
catches <- left_join(catches, Species, by = 'Species.Code')
catches <- catches %>%
filter(!is.na(Common.Name))
GIS.end.depth <- GIS.end.depth %>%
rename_all(make.names) %>%
dplyr::select(DriftID, Depth2mRes, Depth90mRes) %>%
rename(EDepth2mRes = Depth2mRes, EDepth90mRes = Depth90mRes)
GIS.start.depth <- GIS.start.depth %>%
rename_all(make.names) %>%
dplyr::select(DriftID, Depth2mRes, Depth90mRes) %>%
rename(SDepth2mRes = Depth2mRes, SDepth90mRes = Depth90mRes)
GIS.depths <- left_join(GIS.start.depth, GIS.end.depth)
GIS.depths <- GIS.depths %>% rename(Drift.ID = DriftID)
# select final columns from trip table
trips <- trips %>%
dplyr::select(Trip.ID, Month, Day, Year.Automatic, Vessel) %>%
rename(YEAR = Year.Automatic)
# join drifts and trip info
drifts_all <- left_join(drifts_all, trips)
drifts_all <- left_join(drifts_all, GIS.depths)
View(drifts_all)
View(trips)
View(drifts_all)
with(catches, table(Common.Name, Gear.Type))
View(drifts_all)
cell_coverage <- drifts_all %>% select(Trip.ID, Grid.Cell.ID, Site..MPA..REF.) %>%
unique()
################################################################################
### Script to clean up the CCFRP data and get it in
### A form to use for exploratory analysis
### Melissa Monk
### Feb 2022
################################################################################
rm(list = ls(all = TRUE))
graphics.off()
library(dplyr)
library(tidyr)
setwd("C:/GitHub/CCFRP")
#-------------------------------------------------------------------------------
# Read in data and basic cleanup
# Eventually open these directly in access, but it's not behaving
# Extract excel files from the Access database
# read in trip data
trips <- read.csv("1-Trip Information.csv", fileEncoding="UTF-8-BOM")
# read in drift data
drifts_all <-read.csv("3-Drift Information.csv", fileEncoding="UTF-8-BOM")
# read in catch data
catches <- read.csv("4-Caught Fishes.csv", fileEncoding="UTF-8-BOM")
#Species lookup
Species <- read.csv("Fish Species.csv", fileEncoding="UTF-8-BOM")
Species$NMFS_interest = Species$Rockfish
nonrockfish = c("California Scorpionfish", "Kelp Greenling", "Lingcod")
Species <- Species %>%
mutate(NMFS_interest = replace(NMFS_interest, Common.Name %in% nonrockfish, TRUE))
Species <- Species %>%
select(Species.Code, Common.Name, Rockfish, NMFS_interest) %>%
filter(NMFS_interest==TRUE)
#Read in management groups
Areas <- read.csv("Monitoring Areas.csv", fileEncoding="UTF-8-BOM")
# read in the two GIS depth spreadsheets from Becky
GIS.start.depth <- readxl::read_xlsx("CCFRP_Start_GIS_Depths.xlsx")
GIS.end.depth <- readxl::read_xlsx("CCFRP_End_GIS_Depths.xlsx")
# columns have spaces - remove all spaces here
trips <- trips %>% rename_all(make.names)
catches <- catches %>% rename_all(make.names)
drifts_all <- drifts_all %>% rename_all(make.names)
#Add species common names
catches <- left_join(catches, Species, by = 'Species.Code')
catches <- catches %>%
filter(!is.na(Common.Name))
GIS.end.depth <- GIS.end.depth %>%
rename_all(make.names) %>%
dplyr::select(DriftID, Depth2mRes, Depth90mRes) %>%
rename(EDepth2mRes = Depth2mRes, EDepth90mRes = Depth90mRes)
GIS.start.depth <- GIS.start.depth %>%
rename_all(make.names) %>%
dplyr::select(DriftID, Depth2mRes, Depth90mRes) %>%
rename(SDepth2mRes = Depth2mRes, SDepth90mRes = Depth90mRes)
GIS.depths <- left_join(GIS.start.depth, GIS.end.depth)
GIS.depths <- GIS.depths %>% rename(Drift.ID = DriftID)
# select final columns from trip table
trips <- trips %>%
dplyr::select(Trip.ID, Month, Day, Year.Automatic, Vessel) %>%
rename(YEAR = Year.Automatic)
# join drifts and trip info
drifts_all <- left_join(drifts_all, trips)
drifts_all <- left_join(drifts_all, GIS.depths)
# Pull only relevent column names from the drifts
drifts <- drifts_all %>%
dplyr::select(
Drift.ID, Trip.ID, ID.Cell.per.Trip, Grid.Cell.ID,
Site..MPA..REF., Drift.Time..hrs., Total...Anglers.Fishing,
Start.Depth..ft., End.Depth..ft., Excluded.Drift.Comment,
ST_LatDD, ST_LonDD, Month, Day, YEAR, Vessel,
SDepth2mRes, EDepth2mRes, SDepth90mRes, EDepth90mRes
) %>%
mutate(
SDepth2mRes = na_if(SDepth2mRes, -9999),
EDepth2mRes = na_if(EDepth2mRes, -9999),
SDepth90mRes = na_if(SDepth90mRes, -9999),
EDepth90mRes = na_if(EDepth90mRes, -9999)
) %>%
rename(SITE = Site..MPA..REF.)
# Need to change 7's to july and 8's to august
drifts$Month[drifts$Month == 7] <- "July"
drifts$Month[drifts$Month == 8] <- "August"
meters_to_feet <- function(x) (-x * 3.281)
drifts <- drifts %>%
mutate_at(
vars(SDepth2mRes, EDepth2mRes, SDepth90mRes, EDepth90mRes),
meters_to_feet
) %>%
rename( StartGISDepth2mRes_ft = SDepth2mRes,
EndGISDepth2mRes_ft = EDepth2mRes,
StartGISDepth90mRes_ft = SDepth90mRes,
EndGISDepth90mRes_ft = EDepth90mRes)
# Collapse catches to drift level
#Target_catches <- subset(catches, Species.Code == ccfrp.species.code)
Drift_catches <- catches %>%
group_by(Common.Name, Drift.ID) %>%
tally()
# join drifts and catch info and calculate cpue
dat <- left_join(Drift_catches, drifts)
dat <- dat %>%
mutate(Area.code = substring(Drift.ID, 1, 2)) %>%
mutate(Effort = Total...Anglers.Fishing * Drift.Time..hrs.) %>%
mutate(CPUE = n / Effort)
dat <- left_join(dat, Areas)
# fix two data entry errors
levels(dat$Grid.Cell.ID)[levels(dat$Grid.Cell.ID) == "Bl49"] <- "BL49"
levels(dat$Grid.Cell.ID)[levels(dat$Grid.Cell.ID) == "Bl51"] <- "BL51"
area_counts <- dat %>%
ungroup() %>%
select(Trip.ID, YEAR, Name) %>%
unique() %>%
group_by(YEAR, Name) %>%
tally() %>%
pivot_wider(names_from = Name, values_from = n)
cell_counts <- dat %>%
ungroup() %>%
select(Trip.ID, YEAR, Grid.Cell.ID) %>%
unique() %>%
group_by(YEAR, Grid.Cell.ID) %>%
tally() %>%
pivot_wider(names_from = Grid.Cell.ID, values_from = n)
#Remove just the areas not sampled consistently
#remove farralons, Point Conception,  trinidad, Laguna Beach, NA's 'BM" is data entry error
#Also remove all cells with MM and RR - defited outside either the reference area or MPA cells
cells_to_exclude <- c('MM', 'RR', 'MN', 'MO')
dat <- dat %>%
filter(!(Area.code %in% c("FN", "PC", "BM", "LB", "TD", NA))) %>%
filter(!grepl(sprintf('(%s)$',
paste0(cells_to_exclude, collapse = '|')), Grid.Cell.ID)) %>%
filter(!grepl("Exclude|across|outside",Excluded.Drift.Comment)) %>%
droplevels
with(dat, table(Area.code))
#-------------------------------------------------------------------------------
# Fish time filter
# Give drifts within a cell on the same day a drift number
# See how many drifts and total fished time
Time_cell_fished <- dat %>%
select(YEAR, Drift.ID, ID.Cell.per.Trip, Drift.Time..hrs.) %>%
unique() %>%
group_by(YEAR, ID.Cell.per.Trip) %>%
summarise(
num.drifts = n(),
tot_time = sum(Drift.Time..hrs.)
)
# cells fished at least 2 minutes
Drift_time_keep <- Time_cell_fished %>% filter(tot_time >= (10/60))
# Remove cells fished less tan a total of 15 minutes on a day
dat_final <- dat %>%
filter(
ID.Cell.per.Trip %in% Drift_time_keep$ID.Cell.per.Trip)
View(dat_final)
##Look at the number of cells fished per year
cell_coverage <- dat_final %>% dplyr::select(Trip.ID, Grid.Cell.ID, YEAR) %>% unique
with(cell_coverage, table(YEAR, Grid.Cell.ID))
##Look at the number of cells fished per year
cell_coverage <- dat_final %>% dplyr::select(Trip.ID, Grid.Cell.ID,
YEAR, Monitoring.Group) %>% unique
with(cell_coverage, table(Monitoring.Group, YEAR, Grid.Cell.ID))
##Look at the number of cells fished per year
cell_coverage <- dat_final %>% ungroup() %>%
dplyr::select(Trip.ID, Grid.Cell.ID,
YEAR, Monitoring.Group) %>% unique
with(cell_coverage, table(Monitoring.Group, YEAR, Grid.Cell.ID))
with(cell_coverage, table(YEAR, Grid.Cell.ID,Monitoring.Group))
getwd()
unique(cell_coverage$SITE)
##Look at the number of cells fished per year
cell_coverage <- dat_final %>% ungroup() %>%
dplyr::select(Trip.ID, Grid.Cell.ID,
YEAR, Monitoring.Group, SITE) %>% unique
unique(cell_coverage$SITE)
View(drifts_all)
View(dat_final)
##Look at the number of cells fished per year
cell_coverage <- dat_final %>% ungroup() %>%
dplyr::select(Trip.ID, Grid.Cell.ID,
YEAR, Name, SITE) %>% unique
unique(cell_coverage$Name)
test <- cell_coverage %>% filter(Name =="Point Buchon")
test <- cell_coverage %>% filter(Name =="Point Buchon") %>%
droplevels()
with(test, table(YEAR, Grid.Cell.ID))
with(test, table(YEAR, Grid.Cell.ID, SITE))
install.packages("bookdown")
library(bookdown)
